<?php

namespace Equinoxe\DataStoreBundle\Entity\Orm;

use Equinoxe\DataStoreBundle\Entity\Orm\StringRecord;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\UnitOfWork;



/**
 * Test class for OrmDataStore.
 * Generated by PHPUnit on 2011-01-18 at 15:52:49.
 */
class OrmDataStoreTest extends \Equinoxe\TestBundle\Test\WebTestCase {

    /**
     * @var OrmDataStore
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->container = $this->createContainer();
        $this->object = new OrmDataStore($this->container);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {

    }

    public function testGetRecords() {

        $testKey = \sha1(mt_rand(1,9999));
        $testValue = \sha1(mt_rand(1,9999));
        $obj = new StringRecord();
        $obj->setKey($testKey);
        $obj->setValue($testValue);

        $arrayCollection = new ArrayCollection;
        $arrayCollection->add($obj);
        $this->object->setRecords($arrayCollection);

        $records = $this->object->getRecords();
        $this->assertSame(1, count($records));
        $this->assertSame($testValue, $records[$testKey]->getValue());
    }

    public function testAdd() {
        $testKey = \sha1(mt_rand(1,9999));
        $testValue = \sha1(mt_rand(1,9999));
        $obj = new StringRecord();
        $obj->setKey($testKey);
        $obj->setValue($testValue);
        $this->object->add($obj);
        $records = $this->object->getRecords();
        $this->assertSame(1, count($records));
        $this->assertSame($testValue, $records[$testKey]->getValue());
    }

    public function testGet() {
        $testKey = \sha1(mt_rand(1,9999));
        $testValue = \sha1(mt_rand(1,9999));
        $obj = new StringRecord();
        $obj->setKey($testKey);
        $obj->setValue($testValue);

        $arrayCollection = new ArrayCollection;
        $arrayCollection->add($obj);
        $this->object->setRecords($arrayCollection);

        $record = $this->object->get($testKey);
        $this->assertSame($testValue, $record->getValue());
    }

    public function testSet() {
        $em = $this->container->get('doctrine.orm.entity_manager');
        // Get needed stuff.
        $uow = $em->getUnitOfWork();

        // This test uses persistence.
        $this->object->setName('TestStore');
        $em->persist($this->object);

        // Add a first record which gets replaced later.
        $teststring1 = new StringRecord('Teststring1');
        $em->persist($teststring1);
        $this->object->set('wango', $teststring1);
        $em->flush();

        // Is this record now managed?
        $this->assertEquals(UnitOfWork::STATE_MANAGED,$uow->getEntityState($teststring1));

        // New record to replace the first one.
        $teststring2 = new StringRecord('Teststring2');
        $em->persist($teststring2);
        $this->object->set('wango', $teststring2);
        $em->flush();

        // Did replacing work?
        $this->assertEquals('Teststring2', $this->object->get('wango')->getValue());

        // Is the first one removed from the database or is it a zombie?
        $this->assertEquals(UnitOfWork::STATE_NEW, $uow->getEntityState($teststring1));

        // Is the second one persisted?
        $this->assertEquals(UnitOfWork::STATE_MANAGED, $uow->getEntityState($teststring2));

        // Create new Container to clear temporary entity cache
        $con = $this->createContainer();
        $newEm = $con->get('doctrine.orm.entity_manager');
        $obj = $newEm->find('Equinoxe\DataStoreBundle\Entity\Orm\OrmDataStore', $this->object->getUid());

        $this->assertTrue($obj->exists('wango'));
        $this->assertEquals('Teststring2', $obj->get('wango')->getValue());
        $this->assertEquals(1, $obj->getRecordsRaw()->count());
    }
    /**
     * Test the snapshot methods.
     */
    public function testSetGetSnapshot() {
        $em = $this->container->get('doctrine.orm.entity_manager');
        // Get needed stuff.
        $uow = $em->getUnitOfWork();

        // This test uses persistence.
        $this->object->setName('TestStore');
        $em->persist($this->object);
        $testvalue1='snapshot123';
        $testvalue2='snapshot254';

        $myrecord=new StringRecord();
        $em->persist($myrecord);
        $myrecord->setKey('testkey');
        $myrecord->setValue($testvalue1);
        $this->object->add($myrecord);
        $em->flush();

        $snapshot=$this->object->saveSnapShot();

        $myrecord2=new StringRecord();
        $em->persist($myrecord2);
        $myrecord2->setKey('testkey');
        $myrecord2->setValue($testvalue2);
        $this->object->set('testkey',$myrecord2);
        $em->flush();

        $this->assertEquals($testvalue2, $this->object->get('testkey')->getValue());
        $this->object->restoreSnapShot($snapshot);
        $em->flush();
        $this->assertEquals($testvalue1, $this->object->get('testkey')->getValue());

    }
}